{
    "benchmarks.track_pec": {
        "code": "def track_pec(\n    circuit_type: str,\n    nqubits: int,\n    depth: int,\n    observable: Observable,\n    num_samples: int,\n) -> float:\n    \"\"\"Returns the PEC error mitigation factor, i.e., the ratio\n\n    (error without PEC) / (error with PEC).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n        num_samples: Number of circuits to sample/run.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    noise_level = 0.01\n    reps = pec.represent_operations_in_circuit_with_local_depolarizing_noise(\n        circuit, noise_level\n    )\n\n    compute_density_matrix = functools.partial(\n        mitiq_cirq.compute_density_matrix,\n        noise_model=cirq.depolarize,\n        noise_level=(noise_level,),\n    )\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(circuit, compute_density_matrix, observable)\n    pec_value = pec.execute_with_pec(\n        circuit,\n        compute_density_matrix,\n        observable,\n        representations=reps,\n        num_samples=num_samples,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - pec_value))",
        "name": "benchmarks.track_pec",
        "param_names": [
            "circuit",
            "nqubits",
            "depth",
            "observable",
            "num_samples"
        ],
        "params": [
            [
                "'rb'",
                "'mirror'"
            ],
            [
                "1"
            ],
            [
                "1",
                "2",
                "3"
            ],
            [
                "<mitiq.observable.observable.Observable object>"
            ],
            [
                "10"
            ]
        ],
        "timeout": 300,
        "type": "track",
        "unit": "Error mitigation factor",
        "version": "ca57162c1ec6d21fd6acec74d47d64dc7c2b59a2a70ff3eaa05e55453c69f1c8"
    },
    "benchmarks.track_zne": {
        "code": "def track_zne(\n    circuit_type: str, nqubits: int, depth: int, observable: Observable,\n) -> float:\n    \"\"\"Returns the ZNE error mitigation factor, i.e., the ratio\n\n    (error without ZNE) / (error with ZNE).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(\n        circuit, mitiq_cirq.compute_density_matrix, observable\n    )\n    zne_value = zne.execute_with_zne(\n        circuit, mitiq_cirq.compute_density_matrix, observable,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - zne_value))",
        "name": "benchmarks.track_zne",
        "param_names": [
            "circuit",
            "nqubits",
            "depth",
            "observable"
        ],
        "params": [
            [
                "'rb'",
                "'mirror'"
            ],
            [
                "1"
            ],
            [
                "1",
                "2",
                "3"
            ],
            [
                "<mitiq.observable.observable.Observable object>"
            ]
        ],
        "timeout": 300,
        "type": "track",
        "unit": "Error mitigation factor",
        "version": "1194fbf5274a6de9a222ab31995a522ee6d3843527c1359b3e2a3846fa2b6e5b"
    },
    "version": 2
}