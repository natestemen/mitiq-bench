{"project": "Mitiq", "project_url": "https://github.com/unitaryfund/mitiq", "show_commit_url": "https://github.com/unitaryfund/mitiq/commit/", "hash_length": 8, "revision_to_hash": {"147": "1136118641651f769d0501b8aee47b32d236a890", "196": "f14caebe328d13aee1c14d87b2a13eff66d48ed2", "197": "223e6d5943d1e0cbc005e5a9f3a733a021c3fcd0", "215": "7e68264592ee040297a2719ec3fb3057460debd1", "227": "3a92c906e70bf6d2a5f29f852b1569c43008648b", "240": "62b1a804819ae6878bfdac5fcfff01f57eddfbc9", "263": "c3264c9ce694b53c239de2272914c55d4e4ebf1e", "280": "6eee6f210f45301ea0964c9c5778ca978d9fce41", "308": "99c8d7453364c7e664876551ed066e2359f9a01d", "333": "09bf91ce16689d98cfef3a366637cde2f32c74f3", "398": "e908778c827d9a9454c1f45f4b0f93f9695a3d89", "430": "9fa23ad5afb1877fca36c6c376a7bf80f81d5d7b", "518": "75b89ca184f040d4d3e65832a57907730f982e67", "532": "704ba56badc82be007dff5bf49a488b5471fedb2", "543": "e5fd404d1d319b9043d67ca8049535af5e7125fe", "578": "41e91ebc6a7c62ed97771b63be11a6886cb5d81d", "700": "63cd394b2c3e3f3a3a2185b0f96790d9884b9b68", "754": "b1e5cfda16b46817d18745261c4af29be82a5078", "773": "337062c9d78826a9d3dbdca2d5418d009982656b", "820": "9128a020722967cf24f22aeefc1507b09c834df4", "842": "c7f7330d17d89ffdd0ccc08a3e22dc8c91305dc1", "905": "612595f587652daa4e950f11ddee750b5e65a192", "955": "103969ef41a1df14b264901d338ac478ca4b8656", "1010": "759cba1c98ef85b984a1e4cdbfb489ffca020dc3", "1129": "e5ed57ffd717f834afa6f7f05a51f6d54086c85c", "1130": "a486e5f583404eab71790e35d761c42f0df47580", "1131": "634693f445308536f665f060ef47b4154f71410c", "1132": "c5d86f7ede04b35ba765a6b46fd984584fc4d435", "1133": "bf87d13e5b361544e6740245c776dfb2bf79fa46", "1134": "336f0b78d3f584497a5cebc90ff711b7c2618ff3", "1141": "c1e6b525c8f3988b99a07806f96b6e76a29bac0a", "1142": "f8fe08cbb39f13243038e1f693071760a7e8c357", "1146": "bd3cad646bff72ea316b129f1def44f8e879c2e9", "1147": "88adac993d8839fd05b3ed8f9ce3a7c59347e2a0", "1148": "a66920de1393181a8c1cf51103007980114f2e79", "1149": "b4b16b0ad29e9fc46a83f253bf244bd2ac93494d", "1150": "03d854a3e95662b5b1f4718b87de40300dd0fecf", "1151": "97a70c0d07acde8a9a4f29f075cf39aa431b5fd4", "1152": "4fb3ee2bfc769c8f9f2c1308bc47ba01cac63cfa", "1153": "0562e3161a7063e1fc8b95a19df06dc6acae4bfb", "1154": "2c0d280b67c6cec8c0e1a5e548daa6bf65e801c8", "1155": "b4b6699b4c1ac6e6a680fdcd614dd3d707fad10d"}, "revision_to_date": {"147": 1591288978000, "196": 1597530330000, "197": 1597667321000, "215": 1599072995000, "227": 1601854491000, "240": 1604086737000, "263": 1607288818000, "280": 1610473970000, "308": 1612799532000, "333": 1614626390000, "398": 1617809045000, "430": 1620314903000, "518": 1623948896000, "532": 1624528568000, "543": 1625086320000, "578": 1625650735000, "700": 1632246837000, "754": 1635957493000, "773": 1638207226000, "820": 1642793115000, "842": 1645797813000, "905": 1649253855000, "955": 1651258991000, "1010": 1654283783000, "1129": 1654805576000, "1130": 1654806150000, "1131": 1654806531000, "1132": 1654809133000, "1133": 1654809784000, "1134": 1654810240000, "1141": 1654817447000, "1142": 1654818236000, "1146": 1655136272000, "1147": 1655136848000, "1148": 1655137461000, "1149": 1655137981000, "1150": 1655138510000, "1151": 1655139193000, "1152": 1655142180000, "1153": 1655142299000, "1154": 1655142561000, "1155": 1655143072000}, "params": {"machine": ["gh-runner", "ghrunner"], "python": ["3.7", "3.8"], "branch": ["master"]}, "graph_param_list": [{"machine": "ghrunner", "python": "3.8", "branch": "master"}, {"machine": "ghrunner", "python": "3.7", "branch": "master"}, {"machine": "gh-runner", "python": "3.7", "branch": "master"}], "benchmarks": {"benchmarks.track_pec": {"code": "def track_pec(\n    circuit_type: str,\n    nqubits: int,\n    depth: int,\n    observable: Observable,\n    num_samples: int,\n) -> float:\n    \"\"\"Returns the PEC error mitigation factor, i.e., the ratio\n\n    (error without PEC) / (error with PEC).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n        num_samples: Number of circuits to sample/run.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    noise_level = 0.01\n    reps = pec.represent_operations_in_circuit_with_local_depolarizing_noise(\n        circuit, noise_level\n    )\n\n    compute_density_matrix = functools.partial(\n        mitiq_cirq.compute_density_matrix,\n        noise_model=cirq.depolarize,\n        noise_level=(noise_level,),\n    )\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(circuit, compute_density_matrix, observable)\n    pec_value = pec.execute_with_pec(\n        circuit,\n        compute_density_matrix,\n        observable,\n        representations=reps,\n        num_samples=num_samples,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - pec_value))", "name": "benchmarks.track_pec", "param_names": ["circuit", "nqubits", "depth", "observable", "num_samples"], "params": [["'rb'", "'mirror'"], ["1"], ["1", "2", "3"], ["<mitiq.observable.observable.Observable object>"], ["10"]], "timeout": 300, "type": "track", "unit": "Error mitigation factor", "version": "ca57162c1ec6d21fd6acec74d47d64dc7c2b59a2a70ff3eaa05e55453c69f1c8"}, "benchmarks.track_zne": {"code": "def track_zne(\n    circuit_type: str, nqubits: int, depth: int, observable: Observable,\n) -> float:\n    \"\"\"Returns the ZNE error mitigation factor, i.e., the ratio\n\n    (error without ZNE) / (error with ZNE).\n\n    Args:\n        circuit_type: Type of benchmark circuit.\n        nqubits: Number of qubits in the benchmark circuit.\n        depth: Some proxy of depth in the benchmark circuit.\n        observable: Observable to compute the expectation value of.\n    \"\"\"\n    circuit = get_benchmark_circuit(circuit_type, nqubits, depth)\n\n    true_value = raw.execute(\n        circuit, compute_density_matrix_noiseless, observable\n    )\n    raw_value = raw.execute(\n        circuit, mitiq_cirq.compute_density_matrix, observable\n    )\n    zne_value = zne.execute_with_zne(\n        circuit, mitiq_cirq.compute_density_matrix, observable,\n    )\n    return np.real(abs(true_value - raw_value) / abs(true_value - zne_value))", "name": "benchmarks.track_zne", "param_names": ["circuit", "nqubits", "depth", "observable"], "params": [["'rb'", "'mirror'"], ["1"], ["1", "2", "3"], ["<mitiq.observable.observable.Observable object>"]], "timeout": 300, "type": "track", "unit": "Error mitigation factor", "version": "1194fbf5274a6de9a222ab31995a522ee6d3843527c1359b3e2a3846fa2b6e5b"}}, "machines": {"ghrunner": {"machine": "ghrunner", "version": 1}, "gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {"v.0.1a2": 197, "v0.1.0": 215, "v0.10.0": 700, "v0.11.0": 754, "v0.11.1": 773, "v0.12.0": 820, "v0.13.0": 842, "v0.14.0": 905, "v0.15.0": 955, "v0.16.0": 1010, "v0.1a1": 147, "v0.1a2": 196, "v0.2.0": 227, "v0.3.0": 240, "v0.4.0": 263, "v0.4.1": 280, "v0.5.0": 308, "v0.6.0": 333, "v0.7.0": 398, "v0.8.0": 430, "v0.9.0": 518, "v0.9.1": 532, "v0.9.2": 543, "v0.9.3": 578}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}